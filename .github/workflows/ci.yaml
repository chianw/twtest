---
name: Continuous Integration
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      root_module_folder_relative_path:
        description: 'Root Module Folder Relative Path'
        default: '.'
        type: string
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string

env:
  ARM_PROVIDER_ENHANCED_VALIDATION: "false"

jobs:
  plan:
    name: Validate Terraform Plan
    runs-on: ubuntu-latest
    concurrency: groupone
    environment: plan
    permissions:
      # NOTE: When modifying the token subject claims and adding `environment`.
      # If the `id-token` permission is granted at the workflow level
      # and the workflow has at least one job that does not specify an environment
      # then the action will fail with an internal error.
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Set Environment Variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "terraform_cli_versions=${{ inputs.terraform_cli_versions }}" >> $GITHUB_ENV
            echo "root_module_folder_relative_path=${{ inputs.root_module_folder_relative_path }}" >> $GITHUB_ENV
          else
            echo "terraform_cli_versions=latest" >> $GITHUB_ENV
            echo "root_module_folder_relative_path=." >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.terraform_cli_versions }}

      - name: Terraform Init
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            terraform \
            -chdir="${{ inputs.root_module_folder_relative_path }}" \
            init \
            -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
            -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
            -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
            -backend-config="key=${{vars.BACKEND_TFSTATE_FILENAME}}"            
          else
            terraform \
            -chdir="${{ env.root_module_folder_relative_path }}" \
            init \
            -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
            -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
            -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
            -backend-config="key=${{vars.BACKEND_TFSTATE_FILENAME}}"          
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform \
          -chdir="${{ env.root_module_folder_relative_path }}" \
          plan \
          -input=false

      - name: Update Pull Request
        if: (success() || failure()) && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Run details</summary>

            The plan was a ${{ steps.plan.outcome }} see the action for more details.

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })